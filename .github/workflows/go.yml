# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build:
    name: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.20'

    - name: linux-amd64
      env: 
        GOOS: linux
        GOARCH: amd64
      run: go build -o imgapi-amd64

    - name: linux-arm64
      env:
        GOOS: linux
        GOARCH: arm64
      run: go build -o imgapi-arm64

    - name: windows-x64
      env:
        GOOS: windows
        GOARCH: amd64
      run: go build -o imgapi.exe

    - uses: actions/upload-artifact@v2
      with:
        name: imgapi-amd64
        path: imgapi-amd64
    - uses: actions/upload-artifact@v2
      with:
        name: imgapi-arm64
        path: imgapi-arm64
    - uses: actions/upload-artifact@v2
      with:
        name: imgapi.exe
        path: imgapi.exe

  release:
    name: release
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v2
      with:
        path: result
    - name: create-release
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false

    - name: upload-release
      id: upload-release
      run: |
        for f in result/*; do
          GITHUB_UPLOAD_URL=$(echo "${{ steps.create_release.outputs.upload_url }}" | sed 's/\?.*//')
          name=$(basename "$f")
          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" --data-binary @"${f}" "${GITHUB_UPLOAD_URL}?name=${name}&label=${name}"
        done
