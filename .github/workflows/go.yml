# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    tags:
      - "*"

jobs:

  build:
    name: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.20'

    - name: linux-amd64
      env: 
        GOOS: linux
        GOARCH: amd64
      run: go build -o imgapi-amd64

    - name: linux-arm64
      env:
        GOOS: linux
        GOARCH: arm64
      run: go build -o imgapi-arm64

    - name: windows-x64
      env:
        GOOS: windows
        GOARCH: amd64
      run: go build -o imgapi.exe

    - uses: actions/upload-artifact@v4
      with:
        name: imgapi-amd64
        path: imgapi-amd64
    
    - uses: actions/upload-artifact@v4
      with:
        name: imgapi-arm64
        path: imgapi-arm64
    
    - uses: actions/upload-artifact@v4
      with:
        name: imgapi.exe
        path: imgapi.exe
  
  # 实在弄不懂，直接抄的 https://github.com/Hoshinonyaruko/Gensokyo 的答案
  release:
    name: release
    needs: build
    runs-on: ubuntu-latest
    steps:
    steps:

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: output

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false

      - name: Upload Release Assets
        run: |
          for dir in output/*; do
            if [ -d "$dir" ]; then
              for file in "$dir"/*; do
                if [ -f "$file" ]; then
                  asset_name=$(basename "$file")
                  echo "Uploading ${asset_name}"
                  GITHUB_UPLOAD_URL=${{ steps.create_release.outputs.upload_url }}
                  GITHUB_UPLOAD_URL="${GITHUB_UPLOAD_URL%\{*}"
                  GITHUB_UPLOAD_URL="${GITHUB_UPLOAD_URL%\?*}"
                  curl \
                  -X POST \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Content-Type: application/octet-stream" \
                  --data-binary @"${file}" \
                  "${GITHUB_UPLOAD_URL}?name=${asset_name}&label=${asset_name}"
                else
                  echo "Expected a file in ${dir}, but found something else."
                fi
              done
            else
              echo "Expected ${dir} to be a directory."
            fi
          done